package com.sistema.janelas;

import com.sistema.bd.QuestionDAO;
import com.sistema.bean.Question;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

// falta conectar com o banco e caregar o banco dentro das questoes
/**
 * @author Danrlei
 */
public class NewQuestion extends javax.swing.JInternalFrame {

    private String Resposta = new String();
    private Question Q = new Question();
    private QuestionDAO QD = new QuestionDAO();
    
    

    /**
     * Creates new form NewQuestion
     */
    public NewQuestion() {
        super("Escolha a alternativa equivalemente a palavra em inglês");
        initComponents();
        atualizarListQuestions();
        caregabanco();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        enunciado = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        pular = new javax.swing.JButton();
        A = new javax.swing.JLabel();
        B = new javax.swing.JLabel();
        D = new javax.swing.JLabel();
        C = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListQuestion = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        codigo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);

        enunciado.setColumns(20);
        enunciado.setRows(5);
        /*File arquivo = new File("Questions.txt");
        try (FileReader fr = new FileReader(arquivo)) {
            BufferedReader br = new BufferedReader(fr);
            String content;
            content = br.readLine();
            enunciado.setText(content);
        } catch (IOException ex) {
            ex.printStackTrace();
        }*/

        enunciado.setText(Q.getEnunciado());
        jScrollPane1.setViewportView(enunciado);

        jLabel1.setText("Alternativas:");

        pular.setText("Pular");
        pular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pularActionPerformed(evt);
            }
        });

        A.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        A.setText("A) "+ Q.getA());
        A.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AFocusGained(evt);
            }
        });

        B.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        B.setText("B) "+ Q.getB());
        B.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                BFocusGained(evt);
            }
        });

        D.setText("D) "+ Q.getD());
        D.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        D.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                DFocusGained(evt);
            }
        });

        C.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        C.setText("C) "+Q.getC());
        C.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CFocusGained(evt);
            }
        });

        ListQuestion.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(ListQuestion);

        jLabel2.setText("Codigo:");

        codigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                codigoFocusLost(evt);
            }
        });

        jLabel3.setText("Digite um codigo existe para ler a questão.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(B, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(A, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(C, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(D, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(pular)
                            .addComponent(jLabel1))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(codigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(A, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(C, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(B, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(D, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pular)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AFocusGained
        if (("a").equals(Q.getResp().toLowerCase())) {
            JOptionPane.showMessageDialog(null, "Resposta Correta.");
        } else {
            JOptionPane.showMessageDialog(null, "Resposta Errada.");
        }
        limpar();
    }//GEN-LAST:event_AFocusGained

    private void BFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BFocusGained
        if (("b").equals(Q.getResp().toLowerCase())) {
            JOptionPane.showMessageDialog(null, "Resposta Correta.");
        } else {
            JOptionPane.showMessageDialog(null, "Resposta Errada.");
        }
        limpar();
    }//GEN-LAST:event_BFocusGained

    private void CFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CFocusGained
        if (("c").equals(Q.getResp().toLowerCase())) {
            JOptionPane.showMessageDialog(null, "Resposta Correta.");
        } else {
            JOptionPane.showMessageDialog(null, "Resposta Errada.");
        }
        limpar();
    }//GEN-LAST:event_CFocusGained

    private void DFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_DFocusGained
        if (("d").equals(Q.getResp().toLowerCase())) {
            JOptionPane.showMessageDialog(null, "Resposta Correta.");
        } else {
            JOptionPane.showMessageDialog(null, "Resposta Errada.");
        }
        limpar();
    }//GEN-LAST:event_DFocusGained

    private void codigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_codigoFocusLost
        String cod = codigo.getText().trim();
        if (cod.length() > 0) {
            Integer codigo = null;
            try {
                codigo = Integer.parseInt(cod);
            } catch (NumberFormatException e) {
                //o código informado é inválido
                return;
            }
            Question q = QD.getQuestion(codigo);
            if (q == null) {
                JOptionPane.showMessageDialog(this, "Questão não encontrada!");

            } else {
                setQuestions(q);
            }
        }
    }//GEN-LAST:event_codigoFocusLost

    private void pularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pularActionPerformed
        Integer atual;
        atual = Integer.parseInt(codigo.getText());
        atual = atual + 1;
        codigo.setText("" + atual);
        codigo.setFocusable(closable);
        //codigo.lostFocus(evt, true);

    }//GEN-LAST:event_pularActionPerformed

    private void atualizarListQuestions() {
        ListQuestion.setListData(new Vector(QD.getAll()));
    }

    public void caregabanco() {
        List<Question> QList = QD.getAll();
        final Question[] strings = new Question[QList.size()];
        int i = 0;

        for (Question a : QList) {
            strings[i++] = a;
        }
        ListQuestion.removeAll();
        ListQuestion.setModel(new javax.swing.AbstractListModel() {

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i].getCodigo() + " - " + strings[i].getEnunciado();
            }
        });
    }

    private void limpar() {
        Q = null;
        enunciado.setText("");
        A.setText("a)");
        B.setText("b)");
        C.setText("c)");
        D.setText("d)");
    }

    public Question setQuestions(Question q) {
        enunciado.setText(q.getEnunciado());
        A.setText(q.getA());
        B.setText(q.getB());
        C.setText(q.getC());
        D.setText(q.getD());
        Resposta = (q.getResp());
        return q;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel A;
    private javax.swing.JLabel B;
    private javax.swing.JLabel C;
    private javax.swing.JLabel D;
    private javax.swing.JList<String> ListQuestion;
    private javax.swing.JTextField codigo;
    private javax.swing.JTextArea enunciado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton pular;
    // End of variables declaration//GEN-END:variables
}
